#+TITLE: Processes 101
* Actor concurrency model
* Building a weather application

- [[https://hex.pm/][Hex]] :: The package manager for the Erlang ecosystem.
- [[https://hexdocs.pm/][hexdocs]] Hexdocs is a place for hex packages to host their documentation.

Creating a new project:

#+BEGIN_SRC shell
  mix new metex
#+END_SRC

Add two dependencies by modifying the =deps= function to look like this:
#+BEGIN_SRC elixir
  defp deps do
    [
      {:httpoison, "~> 1.7"},
      {:json, "~> 1.3"}
    ]
  end
#+END_SRC

Install the dependencies using:
#+BEGIN_SRC shell
  mix deps.get
#+END_SRC


* The worker
You need to obtain an API key from the third-party weather service [[https://openweathermap.org/][OpenWeatherMap]].

Create an account for OpenWeatherMap:
- Username: keer2345 , 123456hui
- Email: keer2345@163.com
- API key: dc4408560f0839350a00ed3420aa7445

#+BEGIN_SRC elixir
defmodule Metex.Worker do
  def temperature_of(location) do
    result = url_for(location) |> HTTPoison.get |> parse_response
    case result do
      {:ok, temp} -> "#{location}: #{temp}°C"
      :error -> "#{location} not found"
    end
  end

  defp url_for(location) do
    location = URI.encode(location)
    "http://api.openweathermap.org/data/2.5/weather?q=#{location}&appid=#{apikey}"
  end

  defp parse_response(resp) do
    case resp do
      {:ok, %HTTPoison.Response{body: body, status_code: 200}} ->
        body |> JSON.decode |> compute_temperature
      _ -> :error
    end
  end

  defp compute_temperature(json) do
    try do
      {:ok, json} = json
      temp = (json["main"]["temp"] - 273.15) |> Float.round(1)
      {:ok, temp}
    rescue
      _ -> :error
    end
  end

  defp apikey do
    "dc4408560f0839350a00ed3420aa7445"
  end

end
#+END_SRC

** Taking the worker for a spin
#+BEGIN_SRC elixir
% iex -S mix
Erlang/OTP 23 [erts-11.0.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [dtrace]

Compiling 1 file (.ex)
warning: variable "apikey" does not exist and is being expanded to "apikey()", please use parentheses to remove the ambiguity or change the variable name
  lib/worker.ex:12: Metex.Worker.url_for/1

Interactive Elixir (1.10.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> Metex.Worker.temperature_of "liuzhou"
"liuzhou: 28.5°C"
iex(2)> Metex.Worker.temperature_of "Verkhoyansk, Russia"
"Verkhoyansk, Russia: 8.0°C"
iex(3)> Metex.Worker.temperature_of "Snag, Yukon, Canada"
"Snag, Yukon, Canada not found"
iex(4)> Metex.Worker.temperature_of "Omicron Persei 8"
"Omicron Persei 8 not found"
#+END_SRC


* Creating processes for concurrency

Let's imagine you have a list of cities for which you want to get temperatures:
#+BEGIN_SRC elixir
iex(2)> cities = ["Singapore", "Monaco", "Vatican City", "Hong Kong", "Macau"]
["Singapore", "Monaco", "Vatican City", "Hong Kong", "Macau"]
iex(3)> cities |> Enum.map(fn city -> Metex.Worker.temperature_of(city) end)
["Singapore: 27.7°C", "Monaco: 23.2°C", "Vatican City: 24.5°C",
 "Hong Kong: 29.5°C", "Macau: 29.4°C"]
#+END_SRC

#+BEGIN_SRC elixir
  def loop do
    receive do
      {sender_pid, location} ->
        send(sender_pid, {:ok, temperature_of(location)})

      _ ->
        IO.puts("don't know how to process this message")
    end

    loop
  end
#+END_SRC

#+BEGIN_SRC elixir
iex> r(Metex.Worker)
iex> pid = spawn(Metex.Worker, :loop, [])
#PID<0.227.0>
#+END_SRC

** Receiving messages

** Sending messages
#+BEGIN_SRC elixir
iex> send(pid, {self, "Singapore"})
iex> flush
{:ok, "Singapore: 29.0°C"}
:ok
#+END_SRC
#+BEGIN_SRC elixir
iex> cities = ["Singapore", "Monaco", "Vatican City", "Hong Kong", "Macau"]
iex> cities |> Enum.each(fn city ->
       pid = spawn(Metex.Worker, :loop, []) send(pid, {self, city})
     end)
iex> flush
{:ok, "Hong Kong: 17.8°C"} {:ok, "Singapore: 27.5°C"} {:ok, "Macau: 18.6°C"}
{:ok, "Monaco: 6.7°C"}
{:ok, "Vatican City: 11.8°C"} :ok
#+END_SRC

* Collecting and manipulating results with another actor
